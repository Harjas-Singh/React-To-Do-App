{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Contact.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","to","Home","state","posts","axios","get","then","res","console","log","setState","data","slice","this","postList","length","map","post","key","id","title","body","Component","Contact","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAuBeA,EApBA,WACX,OACI,yBAAKC,UAAU,+CAEX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,QACA,wBAAID,UAAU,cACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAME,GAAG,SAASF,UAAU,YAA5B,UAEJ,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,YAA9B,YAEJ,wBAAIF,UAAU,YACV,kBAAC,IAAD,CAASA,UAAU,WAAWE,GAAG,KAAjC,Y,wBC8BLC,E,2MAzCXC,MAAQ,CACJC,MAAM,I,mFAEU,IAAD,OACfC,IAAMC,IAAI,8CACTC,KACG,SAAAC,GACIC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVP,MAAMI,EAAII,KAAKC,MAAM,EAAE,U,+BAK9B,IACET,EAASU,KAAKX,MAAdC,MACDW,EAAWX,EAAMY,OACnBZ,EAAMa,IAAI,SAAAC,GACN,OACI,yBAAKnB,UAAU,OAAOoB,IAAKD,EAAKE,IAChC,kBAAC,IAAD,CAAMnB,GAAI,IAAIiB,EAAKE,IACnB,yBAAKrB,UAAU,aACX,wBAAIA,UAAU,cAAcmB,EAAKG,OACjC,uBAAGtB,UAAU,aAAamB,EAAKI,WAO3C,yBAAKvB,UAAU,eAAf,gBAEJ,OACI,yBAAKA,UAAU,aACX,wBAAIA,UAAU,eAAd,QACCgB,O,GApCEQ,aCOJC,EATE,WACb,OACI,yBAAKzB,UAAU,aACX,wBAAIA,UAAU,eAAd,WACA,sPCKG0B,EATA,WACX,OACI,yBAAK1B,UAAU,aACX,wBAAIA,UAAU,eAAd,SACA,sPCgBG2B,E,iLAbT,OACE,kBAAC,IAAD,KACA,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,U,GARtBF,aCKAO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.0a8a290e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link, NavLink} from 'react-router-dom'\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\r\n\r\n            <a className=\"navbar-brand\" href=\"#\">Logo</a>\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <Link to=\"/about\" className=\"nav-link\" >About</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/contact\">Contact</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <NavLink className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Home extends Component{\r\n    state = {\r\n        posts:[]\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(\r\n            res =>{\r\n                console.log(res)\r\n                this.setState({\r\n                    posts:res.data.slice(1,10)\r\n                })\r\n            }\r\n        )\r\n    }\r\n    render(){\r\n        const {posts} = this.state;\r\n        const postList = posts.length ? (\r\n            posts.map(post =>{\r\n                return(\r\n                    <div className=\"card\" key={post.id}>\r\n                    <Link to={'/'+post.id}>\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\">{post.title}</h4>\r\n                        <p className=\"card-text\">{post.body}</p>\r\n                    </div>\r\n                    </Link>\r\n                </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"text-center\">No posts yet</div>\r\n        )\r\n        return(\r\n            <div className=\"container\">\r\n                <h4 className=\"text-center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Contact  = () =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"text-center\">Contact</h4>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sed similique quam unde ipsa in, natus eaque aliquam, iusto asperiores reprehenderit veniam, esse doloribus quis earum veritatis eum soluta voluptatem nam.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\n\r\nconst About  = () =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"text-center\">About</h4>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sed similique quam unde ipsa in, natus eaque aliquam, iusto asperiores reprehenderit veniam, esse doloribus quis earum veritatis eum soluta voluptatem nam.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React,{Component} from 'react';\nimport Navbar from './components/Navbar'\nimport {BrowserRouter,Route} from 'react-router-dom'\nimport Home from './components/Home'\nimport Contact from './components/Contact'\nimport About from './components/About'\n\n  class App extends Component{  \n      render(){\n      return(\n        <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Route exact path='/' component={Home}/>\n          <Route path='/contact' component={Contact}/>\n          <Route path='/about' component={About}/>\n        </div>\n        </BrowserRouter>\n      );\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}